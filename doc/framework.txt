Folksy specification
====================
Simon Kågedal Reimer <simon@kagedal.org>

_Folksy_ is a framework for educational games. 

== Introduction == 
The idea is to develop a simple framework to run graphical educational
games on a variety of platforms. The first priority is the web, then
smartphones.

The games should be easily modified and personalized. For example, you
should be able to create an alphabet learning game for your kid with
images and sounds of relatives, "A for Amanda" etc. 

== Game == 

A _game_ is a complete game of some _game type_ with images, sounds
etc. 

=== Game types ===

There is currently only one game type:

`whatletter`:: 
	The game consists of a set of images (of faces, objects...)
	with corresponding sounds, typically voices that say: "A is
	for apple", and so on. The player then has to click on the
	right letter.

One idea is to separate the game logic into platform independent JavaScript.

=== Themes ===
Graphical and auditive themes in common for many games.

Typsnittet som används för bokstavsbilderna är
http://www.gnu.org/software/freefont/[GNU FreeFont Sans], som är
licensierad med GNU GPL, men tillåter valfri licens för dokument där
typsnittet används.

== Game engines ==
There are game engines.

=== The web game engine ===

:jQuery:		http://jquery.com/[jQuery]
:SoundManager 2:	http://www.schillmania.com/projects/soundmanager2/[SoundManager 2]

The game engine for the web is written in JavaScript using {jQuery}.
Audio on the web is hard to get right. We're using 
{SoundManager 2} which uses HTML5 audio or Flash. 

* http://dev.w3.org/html5/spec/Overview.html#the-audio-element[W3 HTML5 spec for audio] -- http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#the-audio-element[WHATWG spec]
* type for ogg is type='audio/ogg; codecs=vorbis' (http://tools.ietf.org/html/rfc4281[spec for codes]
* http://www.speex.org/[Speex] is a free codec specifically designed
  for speech. Probably no browsers support this though...

=== Mobile game engine ===
* Possibly using http://phonegap.com/[PhoneGap]!
* Possibly also http://jquerymobile.com/[jQuery Mobile]!


== Game tools ==

:yaml:	      http://www.yaml.org/[YAML]
:PyYAML:      http://pyyaml.org/wiki/PyYAML[PyYAML]
:pycountry:   http://pypi.python.org/pypi/pycountry/[pycountry]

This is (supposed to be) a tool to generate games from source files,
written in Python. Here we use the very readable and editable file
format {yaml}.

Libraries used:

* {PyYAML} 3.10 (Debian/Ubuntu package: `python-yaml`)
* {pycountry} (Debian/Ubuntu package: `python-pycountry`) *[not used at the moment]*

.PyYAML 3.10
On a Ubuntu system, run `sudo apt-get install python-yaml` to install.

On a system where you're not root, download `PyYAML-3.10.tar.gz` from
the {PyYAML}, unpack it and install with:

 python setup.py --without-libyaml install --user

== Game designer == 
A web application where you can design your own games.

* Use https://code.google.com/p/wami-recorder/[wami-recorder] to record audio

== Appendix A: Internationalization ==

In many ways, the games are localized in themselves. A game is usually
in one specific language. There are messages from the game engines
that need to be translated.

What's a good way to handle internationalization in JavaScript? 

* http://code.google.com/p/jquery-i18n-properties/[jquery-i18n-properties]
  is a "lightweight jQuery plugin for providing internationalization
  to javascript from ‘.properties’ files, just like in Java Resource
  Bundles". 
* http://stackoverflow.com/questions/48726/best-javascript-i18n-techniques-ajax-dates-times-numbers-currency[Stack
  Overflow question] with some good thoughts.
* http://24ways.org/2007/javascript-internationalisation[A blog entry]
  describing a simple method. I'll go for something like this. Just
  need a good sprintf!
** http://www.diveintojavascript.com/projects/javascript-sprintf[JavaScript sprintf()].
